{"remainingRequest":"/home/user101/Desktop/peopleTalk/client/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/user101/Desktop/peopleTalk/client/node_modules/vuetify-loader/lib/loader.js!/home/user101/Desktop/peopleTalk/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/user101/Desktop/peopleTalk/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/user101/Desktop/peopleTalk/client/node_modules/vue-beautiful-chat/src/Launcher.vue?vue&type=template&id=772ff1a8&scoped=true&","dependencies":[{"path":"/home/user101/Desktop/peopleTalk/client/node_modules/vue-beautiful-chat/src/Launcher.vue","mtime":1592039906000},{"path":"/home/user101/Desktop/peopleTalk/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user101/Desktop/peopleTalk/client/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/user101/Desktop/peopleTalk/client/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/home/user101/Desktop/peopleTalk/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user101/Desktop/peopleTalk/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _vm.showLauncher\n        ? _c(\n            \"div\",\n            {\n              staticClass: \"sc-launcher\",\n              class: { opened: _vm.isOpen },\n              style: { backgroundColor: _vm.colors.launcher.bg },\n              on: {\n                click: function($event) {\n                  $event.preventDefault()\n                  _vm.isOpen ? _vm.close() : _vm.openAndFocus()\n                }\n              }\n            },\n            [\n              _vm.newMessagesCount > 0 && !_vm.isOpen\n                ? _c(\"div\", { staticClass: \"sc-new-messsages-count\" }, [\n                    _vm._v(\"\\n      \" + _vm._s(_vm.newMessagesCount) + \"\\n    \")\n                  ])\n                : _vm._e(),\n              _vm.isOpen\n                ? _c(\"img\", {\n                    staticClass: \"sc-closed-icon\",\n                    attrs: {\n                      src: _vm.icons.close.img,\n                      alt: _vm.icons.close.name\n                    }\n                  })\n                : _c(\"img\", {\n                    staticClass: \"sc-open-icon\",\n                    attrs: { src: _vm.icons.open.img, alt: _vm.icons.open.name }\n                  })\n            ]\n          )\n        : _vm._e(),\n      _c(\"ChatWindow\", {\n        attrs: {\n          showLauncher: _vm.showLauncher,\n          showCloseButton: _vm.showCloseButton,\n          messageList: _vm.messageList,\n          onUserInputSubmit: _vm.onMessageWasSent,\n          participants: _vm.participants,\n          title: _vm.chatWindowTitle,\n          titleImageUrl: _vm.titleImageUrl,\n          isOpen: _vm.isOpen,\n          onClose: _vm.close,\n          showEmoji: _vm.showEmoji,\n          showFile: _vm.showFile,\n          showEdition: _vm.showEdition,\n          showDeletion: _vm.showDeletion,\n          placeholder: _vm.placeholder,\n          showTypingIndicator: _vm.showTypingIndicator,\n          colors: _vm.colors,\n          alwaysScrollToBottom: _vm.alwaysScrollToBottom,\n          messageStyling: _vm.messageStyling,\n          disableUserListToggle: _vm.disableUserListToggle\n        },\n        on: {\n          scrollToTop: function($event) {\n            return _vm.$emit(\"scrollToTop\")\n          },\n          onType: function($event) {\n            return _vm.$emit(\"onType\")\n          },\n          edit: function($event) {\n            return _vm.$emit(\"edit\", $event)\n          },\n          remove: function($event) {\n            return _vm.$emit(\"remove\", $event)\n          }\n        },\n        scopedSlots: _vm._u(\n          [\n            {\n              key: \"header\",\n              fn: function() {\n                return [_vm._t(\"header\")]\n              },\n              proxy: true\n            },\n            {\n              key: \"user-avatar\",\n              fn: function(scopedProps) {\n                return [\n                  _vm._t(\"user-avatar\", null, {\n                    user: scopedProps.user,\n                    message: scopedProps.message\n                  })\n                ]\n              }\n            },\n            {\n              key: \"text-message-body\",\n              fn: function(scopedProps) {\n                return [\n                  _vm._t(\"text-message-body\", null, {\n                    message: scopedProps.message,\n                    messageText: scopedProps.messageText,\n                    messageColors: scopedProps.messageColors,\n                    me: scopedProps.me\n                  })\n                ]\n              }\n            },\n            {\n              key: \"system-message-body\",\n              fn: function(scopedProps) {\n                return [\n                  _vm._t(\"system-message-body\", null, {\n                    message: scopedProps.message\n                  })\n                ]\n              }\n            },\n            {\n              key: \"text-message-toolbox\",\n              fn: function(scopedProps) {\n                return [\n                  _vm._t(\"text-message-toolbox\", null, {\n                    message: scopedProps.message,\n                    me: scopedProps.me\n                  })\n                ]\n              }\n            }\n          ],\n          null,\n          true\n        )\n      })\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}