{"remainingRequest":"/home/user101/Desktop/peopleTalk/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/user101/Desktop/peopleTalk/client/src/components/App/Dashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/user101/Desktop/peopleTalk/client/src/components/App/Dashboard.vue","mtime":1571320166796},{"path":"/home/user101/Desktop/peopleTalk/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user101/Desktop/peopleTalk/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/user101/Desktop/peopleTalk/client/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/home/user101/Desktop/peopleTalk/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user101/Desktop/peopleTalk/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n//const lodash = require(\"lodash\");\nconst _ = require(\"underscore\");\nexport default {\n  data: function() {\n    return {\n      randomNumber: 0,\n      roomTopic: \"Hey, there! Join my room.\",\n      roomColor: [\n        \"deep-orange accent-2\",\n        \"yellow accent-2\",\n        \"lime accent-3\",\n        \"green darken-2\",\n        \"light-blue darken-3\"\n      ],\n      totalOnlineUsers: [],\n      userRooms: [],\n      userRoomsWithPass: [],\n      totalOnlineCount: 0,\n      email: null,\n      inputPassData: null,\n      roomName: null,\n      roomPasswd: null,\n      valid: true,\n      user: null,\n      userChooseRoom: null,\n      dialog: false,\n      dialog1: false,\n      passwdProtect: false,\n      passwdEmpty: false,\n      passCorrect: false,\n      nameRules: [\n        v => !!v || \"Name is required\"\n        //v => (v && v.length <= 10) || 'Name must be less than 10 characters'\n      ]\n    };\n  },\n  created: function() {\n    let io = require(\"socket.io-client\");\n    //let socket = io(\"http://localhost:3000/roomCreated\");\n    let socket = io(\"http://localhost:3000\");\n\n    socket.on(\n      \"connect\",\n      function() {\n        let socketId = socket.id;\n        //socketId = socketId.indexOf(\"#\") + 1;\n        //socketId = socket.id.slice(socketId, socket.id.length);\n        //console.log(\"1...###userID##\" + this.userId);\n        socket.emit(\"userSocket\", {\n          socketId: socketId,\n          userId: this.$store.getters.user.userId\n        });\n        console.log(\"The Socket id is @-->\", socketId);\n        //socket.emit(\"userSocketId\", {socketId: socket.id, userIs: this.user});\n        console.log(\n          \"Connected to server., ready to create rooms.. :  \" + socket.id\n        );\n        socket.emit(\"cleanUp\", socket.id);\n      }.bind(this)\n    );\n\n    //socket.emit(\"socketCleanup\", this.socketId);\n\n    socket.on(\n      \"RoomInfo\",\n      function(data) {\n        if (data.passwdEmpty === false) {\n          this.userRoomsWithPass.push({ roomName: data.roomName });\n          for (let i in this.userRoomsWithPass) {\n            socket.emit(\n              \"alreadyRoomWithPass\",\n              this.userRoomsWithPass[i].roomName\n            );\n          }\n        } else {\n          this.passwdProtect = false;\n          this.userRooms.push({ roomName: data.roomName });\n          for (let i in this.userRooms) {\n            socket.emit(\"alreadyRoom\", this.userRooms[i].roomName);\n          }\n        }\n      }.bind(this)\n    );\n\n    socket.on(\n      \"updateRoom\",\n      function(rooms) {\n        rooms = _.uniq(rooms);\n        console.log(rooms);\n        console.log(this.userRooms);\n        this.userRooms = _.uniq(this.userRooms);\n        for (var key in rooms) {\n          //this.userRooms.push({ roomName: rooms[key] });\n          this.userRooms.push({ roomName: rooms[key] });\n        }\n        this.userRooms = _.uniq(this.userRooms, \"roomName\");\n        console.log(this.userRooms);\n      }.bind(this)\n    );\n\n    socket.on(\n      \"updateRoomWithPass\",\n      function(rooms) {\n        rooms = _.uniq(rooms);\n        //this.userRooms = _.uniq(this.userRooms);\n\n        for (var key in rooms) {\n          //this.userRooms.push({ roomName: rooms[key] });\n          this.userRoomsWithPass.push({ roomName: rooms[key] });\n        }\n        this.userRoomsWithPass = _.uniq(this.userRoomsWithPass, \"roomName\");\n      }.bind(this)\n    );\n\n    socket.on(\n      \"removeRoom\",\n      function(roomInfo) {\n        this.$store.dispatch(\"roomClear\", {\n          roomId: roomInfo.roomId\n        });\n\n        this.userRooms = [];\n        this.userRoomsWithPass = [];\n\n        for (var key in roomInfo.userRooms) {\n          //this.userRooms.push({ roomName: rooms[key] });\n          this.userRooms.push({ roomName: roomInfo.userRooms[key] });\n        }\n\n        for (var keyP in roomInfo.userRoomsWithPass) {\n          //this.userRooms.push({ roomName: rooms[key] });\n          this.userRoomsWithPass.push({\n            roomName: roomInfo.userRoomsWithPass[keyP]\n          });\n        }\n\n        this.userRooms = _.uniq(this.userRooms, \"roomName\");\n        this.userRoomsWithPass = _.uniq(this.userRoomsWithPass, \"roomName\");\n\n        for (let i in this.userRooms) {\n          socket.emit(\"alreadyRoom\", this.userRooms[i].roomName);\n        }\n        for (let i in this.userRoomsWithPass) {\n          socket.emit(\n            \"alreadyRoomWithPass\",\n            this.userRoomsWithPass[i].roomName\n          );\n        }\n      }.bind(this)\n    );\n\n    socket.on(\n      \"disconnect\",\n      function() {\n        console.log(\n          \"The socket created at room creation time is disconnected# \" +\n            socket.id\n        );\n        socket.disconnect(true);\n      }.bind(this)\n    );\n  },\n  mounted() {\n    const email = this.$store.getters.user.username;\n    this.email = email;\n  },\n  methods: {\n    onClick() {\n      this.userChooseRoom = event.currentTarget.innerText.split(\"\\n\")[1];\n      //console.log(event.currentTarget.innerText.split(\"\\n\")[1]);\n    },\n    switchPressed() {\n      this.roomPasswd = null;\n    },\n    joinRoom() {\n      this.roomPasswd = null;\n      this.user = this.$store.getters.user.userName;\n      const joinRoomInfo = {\n        username: this.user,\n        roomname: this.userChooseRoom,\n        password: this.roomPasswd\n      };\n\n      console.log(\"##############JOIN ROOM###############\");\n      console.log(joinRoomInfo.username + \" is the username\");\n      console.log(joinRoomInfo.roomname + \" is the roomname\");\n      console.log(joinRoomInfo.password + \" is the password\");\n      this.$store.dispatch(\"roomInfo\", {\n        roomname: joinRoomInfo.roomname,\n        username: joinRoomInfo.username,\n        password: joinRoomInfo.password\n      });\n      console.log(\"##############JOIN ROOM###############\");\n      this.$router.replace(\"/chatRoom\");\n    },\n    handleInput(value) {\n      this.roomPasswd = value;\n      console.log(this.roomPasswd);\n    },\n    async joinRoomWithPass() {\n      this.user = this.$store.getters.user.userName;\n      const joinRoomInfo = {\n        username: this.user,\n        roomname: this.userChooseRoom,\n        password: this.roomPasswd\n      };\n\n      console.log(\"##############JOIN ROOM WITH PASS###############\");\n      console.log(joinRoomInfo.username + \" is the username\");\n      console.log(joinRoomInfo.roomname + \" is the roomname\");\n      console.log(joinRoomInfo.password + \" is the password\");\n      await this.$store\n        .dispatch(\"roomInfo\", {\n          roomname: joinRoomInfo.roomname,\n          username: joinRoomInfo.username,\n          password: joinRoomInfo.password\n        })\n        .then(\n          function() {\n            console.log(this.$store.getters.user.passCorrect);\n          }.bind(this)\n        );\n      if (this.$store.getters.user.passCorrect) {\n        this.$router.replace(\"/chatRoom\");\n      } else {\n        this.dialog1 = true;\n      }\n      console.log(\"##############JOIN ROOM WITH PASS###############\");\n    },\n    showDialog() {\n      let roomIs = null;\n      if (this.email === null || this.email === undefined) {\n        roomIs = this.$store.getters.user.userName;\n        roomIs = roomIs.split(\"@\");\n        this.roomName = roomIs[0] + \"'s room\";\n        this.email = roomIs;\n      } else {\n        roomIs = this.$store.getters.user.userName;\n        this.roomName = roomIs + \"'s room\";\n      }\n\n      console.log(this.roomName);\n      this.dialog = !this.dialog;\n    },\n    submit() {\n      if (this.$refs.form.validate()) {\n        if (this.roomPasswd === null || this.roomPasswd === \"\") {\n          this.roomPasswd = null;\n          const roomInfo = {\n            username: this.$store.getters.user.userName,\n            roomname: this.roomName,\n            password: this.roomPasswd\n          };\n          this.$store.dispatch(\"createRoom\", roomInfo);\n\n          this.dialog = !this.dialog;\n          this.$router.replace(\"/chatRoom\");\n        } else {\n          const roomInfo = {\n            username: this.$store.getters.user.userName,\n            roomname: this.roomName,\n            password: this.roomPasswd\n          };\n          this.$store.dispatch(\"createRoom\", roomInfo);\n          this.dialog = !this.dialog;\n          this.$router.replace(\"/chatRoom\");\n        }\n\n        // Native form submission is not yet supported\n      } else {\n        console.log(\"Room cant be created as form is not validated..\");\n      }\n    }\n  },\n  watch: {\n    room(value) {\n      if (value) {\n        console.log(value);\n        //this.$router.push(\"/chatRoom\");\n        //console.log(\"Room is created\");\n        //this.$store.dispatch(\"logOutUserUp\");\n      }\n    }\n  },\n  computed: {\n    room() {\n      return this.$store.getters.room;\n    },\n    error() {\n      return this.$store.getters.error;\n    }\n  }\n};\n",{"version":3,"sources":["Dashboard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"Dashboard.vue","sourceRoot":"src/components/App","sourcesContent":["<template>\n  <v-app style=\"background: #eee;\">\n    <v-card flat style=\"background: #eee;\">\n      <v-container fluid grid-list-md>\n        <v-layout row wrap>\n          <v-flex\n            xs3\n            v-for=\"rooms in userRooms\"\n            :key=\"rooms.roomName\"\n            @click=\"onClick(rooms, $event)\"\n            @mouseover=\"onClick(rooms, $event)\"\n          >\n            <v-card\n              raised\n              hover\n              class=\"accent-2 black--text\"\n              :color=\"\n                roomColor[\n                  (randomNumber = Math.floor(Math.random() * roomColor.length))\n                ]\n              \"\n            >\n              <div class=\"subheading right ma-2 pa-0\">1/7</div>\n\n              <v-card-title primary-title>\n                <v-icon>fa-home</v-icon>\n                <div class=\"text-truncate\">\n                  <span\n                    ><div class=\"text-truncate font-weight-thin display-1\">\n                      {{ rooms.roomName }}\n                    </div></span\n                  ><br />\n                  <!--span class=\"text-truncate font-weight-normal heading\">{{ roomTopic }}</span-->\n                </div>\n              </v-card-title>\n              <v-divider></v-divider>\n              <v-card-actions class=\"justify-center\">\n                <v-btn v-on:click=\"joinRoom\" class=\"transparent text-capitalize\"\n                  >Join Room\n                  <v-icon right dark>fa-person-booth</v-icon>\n                </v-btn>\n              </v-card-actions>\n            </v-card>\n          </v-flex>\n        </v-layout>\n      </v-container>\n    </v-card>\n    <v-card flat style=\"background: #eee;\">\n      <v-container fluid grid-list-md>\n        <v-layout row wrap>\n          <v-flex\n            xs3\n            v-for=\"rooms in userRoomsWithPass\"\n            :key=\"rooms.roomName\"\n            @click=\"onClick(rooms, $event)\"\n            @mouseover=\"onClick(rooms, $event)\"\n          >\n            <v-card\n              raised\n              hover\n              class=\"accent-2 black--text\"\n              :color=\"\n                roomColor[\n                  (randomNumber = Math.floor(Math.random() * roomColor.length))\n                ]\n              \"\n            >\n              <div class=\"subheading right ma-2 pa-0\">1/7</div>\n\n              <v-card-title primary-title>\n                <v-icon>fa-home</v-icon>\n                <div class=\"text-truncate\">\n                  <span\n                    ><div class=\"text-truncate font-weight-thin display-1\">\n                      {{ rooms.roomName }}\n                    </div></span\n                  ><br />\n                  <!--span class=\"text-truncate font-weight-normal heading\">{{ roomTopic }}</span-->\n                </div>\n              </v-card-title>\n              <v-card flat class=\"transparent\">\n                <v-card-text>\n                  <v-text-field\n                    class=\"pa-0 ma-0\"\n                    @input=\"handleInput($event)\"\n                    prepend-icon=\"lock\"\n                    name=\"roomPass\"\n                    label=\"Enter the Room Password\"\n                    required\n                  >\n                  </v-text-field>\n                </v-card-text>\n              </v-card>\n              <v-divider></v-divider>\n              <v-card-actions class=\"justify-center\">\n                <v-btn\n                  v-on:click=\"joinRoomWithPass\"\n                  class=\"transparent text-capitalize\"\n                >\n                  Join Room\n                  <v-icon right dark>fa-person-booth</v-icon>\n                </v-btn>\n              </v-card-actions>\n            </v-card>\n          </v-flex>\n        </v-layout>\n      </v-container>\n    </v-card>\n\n    <v-layout row justify-center>\n      <v-dialog v-model=\"dialog1\" max-width=\"290\">\n        <v-card dark color=\"primary\">\n          <v-card-text class=\"headline font-weight-light text-xs-center\">\n            <v-icon class=\"ml-1 mr-2\">fa-exclamation-triangle</v-icon>\n            Invalid Password.\n          </v-card-text>\n\n          <v-card-actions> </v-card-actions>\n        </v-card>\n      </v-dialog>\n    </v-layout>\n\n    <v-tooltip top color=\"primary\">\n      <template v-slot:activator=\"{ on }\">\n        <v-btn\n          v-on=\"on\"\n          fab\n          bottom\n          right\n          small\n          color=\"primary\"\n          fixed\n          v-on:click=\"showDialog\"\n        >\n          <v-icon>add</v-icon>\n        </v-btn>\n      </template>\n      <span>Create Room</span>\n    </v-tooltip>\n    <!-- Room Dialogue-->\n    <v-dialog v-model=\"dialog\" width=\"400px\">\n      <v-card>\n        <v-card-title class=\"font-weight-light  red--text headline mb-0\">\n          Create Room\n        </v-card-title>\n        <v-card-text>\n          <v-form\n            ref=\"form\"\n            v-model=\"valid\"\n            @submit.prevent=\"submit\"\n            lazy-validation\n          >\n            <v-text-field\n              class=\"pa-0 ma-0\"\n              v-model=\"roomName\"\n              :rules=\"nameRules\"\n              prepend-icon=\"home\"\n              name=\"roomName\"\n              label=\"Enter the Room Name\"\n              required\n            >\n            </v-text-field>\n            <!--v-text-field \n                  class=\"pa-0 ma-0\"\n                  v-model=\"roomTopic\" \n                  prepend-icon=\"home\" \n                  name=\"roomTopic\" \n                  label=\"Enter room description\"\n                  required>\n                  </v-text-field-->\n            <v-switch\n              v-model=\"passwdProtect\"\n              @change=\"switchPressed\"\n              color=\"primary\"\n              label=\"Password Protect Room\"\n              value=\"passwdProtect\"\n            ></v-switch>\n            <v-text-field\n              v-show=\"passwdProtect\"\n              class=\"pa-0 ma-0\"\n              v-model=\"roomPasswd\"\n              prepend-icon=\"lock\"\n              name=\"roomPasswd\"\n              label=\"Enter the room Password\"\n              required\n            >\n            </v-text-field>\n            <v-card-actions>\n              <v-spacer></v-spacer>\n              <v-btn\n                v-model=\"dialog\"\n                v-on:click=\"dialog = !dialog\"\n                color=\"primary text-capitalize\"\n                >Cancel</v-btn\n              >\n              <v-btn\n                :disabled=\"!valid\"\n                v-on:click=\"submit\"\n                color=\"primary text-capitalize\"\n                >Create Room</v-btn\n              >\n            </v-card-actions>\n          </v-form>\n        </v-card-text>\n      </v-card>\n    </v-dialog>\n    <!--End of Room Dialogue-->\n  </v-app>\n</template>\n\n<script>\n//const lodash = require(\"lodash\");\nconst _ = require(\"underscore\");\nexport default {\n  data: function() {\n    return {\n      randomNumber: 0,\n      roomTopic: \"Hey, there! Join my room.\",\n      roomColor: [\n        \"deep-orange accent-2\",\n        \"yellow accent-2\",\n        \"lime accent-3\",\n        \"green darken-2\",\n        \"light-blue darken-3\"\n      ],\n      totalOnlineUsers: [],\n      userRooms: [],\n      userRoomsWithPass: [],\n      totalOnlineCount: 0,\n      email: null,\n      inputPassData: null,\n      roomName: null,\n      roomPasswd: null,\n      valid: true,\n      user: null,\n      userChooseRoom: null,\n      dialog: false,\n      dialog1: false,\n      passwdProtect: false,\n      passwdEmpty: false,\n      passCorrect: false,\n      nameRules: [\n        v => !!v || \"Name is required\"\n        //v => (v && v.length <= 10) || 'Name must be less than 10 characters'\n      ]\n    };\n  },\n  created: function() {\n    let io = require(\"socket.io-client\");\n    //let socket = io(\"http://localhost:3000/roomCreated\");\n    let socket = io(\"http://localhost:3000\");\n\n    socket.on(\n      \"connect\",\n      function() {\n        let socketId = socket.id;\n        //socketId = socketId.indexOf(\"#\") + 1;\n        //socketId = socket.id.slice(socketId, socket.id.length);\n        //console.log(\"1...###userID##\" + this.userId);\n        socket.emit(\"userSocket\", {\n          socketId: socketId,\n          userId: this.$store.getters.user.userId\n        });\n        console.log(\"The Socket id is @-->\", socketId);\n        //socket.emit(\"userSocketId\", {socketId: socket.id, userIs: this.user});\n        console.log(\n          \"Connected to server., ready to create rooms.. :  \" + socket.id\n        );\n        socket.emit(\"cleanUp\", socket.id);\n      }.bind(this)\n    );\n\n    //socket.emit(\"socketCleanup\", this.socketId);\n\n    socket.on(\n      \"RoomInfo\",\n      function(data) {\n        if (data.passwdEmpty === false) {\n          this.userRoomsWithPass.push({ roomName: data.roomName });\n          for (let i in this.userRoomsWithPass) {\n            socket.emit(\n              \"alreadyRoomWithPass\",\n              this.userRoomsWithPass[i].roomName\n            );\n          }\n        } else {\n          this.passwdProtect = false;\n          this.userRooms.push({ roomName: data.roomName });\n          for (let i in this.userRooms) {\n            socket.emit(\"alreadyRoom\", this.userRooms[i].roomName);\n          }\n        }\n      }.bind(this)\n    );\n\n    socket.on(\n      \"updateRoom\",\n      function(rooms) {\n        rooms = _.uniq(rooms);\n        console.log(rooms);\n        console.log(this.userRooms);\n        this.userRooms = _.uniq(this.userRooms);\n        for (var key in rooms) {\n          //this.userRooms.push({ roomName: rooms[key] });\n          this.userRooms.push({ roomName: rooms[key] });\n        }\n        this.userRooms = _.uniq(this.userRooms, \"roomName\");\n        console.log(this.userRooms);\n      }.bind(this)\n    );\n\n    socket.on(\n      \"updateRoomWithPass\",\n      function(rooms) {\n        rooms = _.uniq(rooms);\n        //this.userRooms = _.uniq(this.userRooms);\n\n        for (var key in rooms) {\n          //this.userRooms.push({ roomName: rooms[key] });\n          this.userRoomsWithPass.push({ roomName: rooms[key] });\n        }\n        this.userRoomsWithPass = _.uniq(this.userRoomsWithPass, \"roomName\");\n      }.bind(this)\n    );\n\n    socket.on(\n      \"removeRoom\",\n      function(roomInfo) {\n        this.$store.dispatch(\"roomClear\", {\n          roomId: roomInfo.roomId\n        });\n\n        this.userRooms = [];\n        this.userRoomsWithPass = [];\n\n        for (var key in roomInfo.userRooms) {\n          //this.userRooms.push({ roomName: rooms[key] });\n          this.userRooms.push({ roomName: roomInfo.userRooms[key] });\n        }\n\n        for (var keyP in roomInfo.userRoomsWithPass) {\n          //this.userRooms.push({ roomName: rooms[key] });\n          this.userRoomsWithPass.push({\n            roomName: roomInfo.userRoomsWithPass[keyP]\n          });\n        }\n\n        this.userRooms = _.uniq(this.userRooms, \"roomName\");\n        this.userRoomsWithPass = _.uniq(this.userRoomsWithPass, \"roomName\");\n\n        for (let i in this.userRooms) {\n          socket.emit(\"alreadyRoom\", this.userRooms[i].roomName);\n        }\n        for (let i in this.userRoomsWithPass) {\n          socket.emit(\n            \"alreadyRoomWithPass\",\n            this.userRoomsWithPass[i].roomName\n          );\n        }\n      }.bind(this)\n    );\n\n    socket.on(\n      \"disconnect\",\n      function() {\n        console.log(\n          \"The socket created at room creation time is disconnected# \" +\n            socket.id\n        );\n        socket.disconnect(true);\n      }.bind(this)\n    );\n  },\n  mounted() {\n    const email = this.$store.getters.user.username;\n    this.email = email;\n  },\n  methods: {\n    onClick() {\n      this.userChooseRoom = event.currentTarget.innerText.split(\"\\n\")[1];\n      //console.log(event.currentTarget.innerText.split(\"\\n\")[1]);\n    },\n    switchPressed() {\n      this.roomPasswd = null;\n    },\n    joinRoom() {\n      this.roomPasswd = null;\n      this.user = this.$store.getters.user.userName;\n      const joinRoomInfo = {\n        username: this.user,\n        roomname: this.userChooseRoom,\n        password: this.roomPasswd\n      };\n\n      console.log(\"##############JOIN ROOM###############\");\n      console.log(joinRoomInfo.username + \" is the username\");\n      console.log(joinRoomInfo.roomname + \" is the roomname\");\n      console.log(joinRoomInfo.password + \" is the password\");\n      this.$store.dispatch(\"roomInfo\", {\n        roomname: joinRoomInfo.roomname,\n        username: joinRoomInfo.username,\n        password: joinRoomInfo.password\n      });\n      console.log(\"##############JOIN ROOM###############\");\n      this.$router.replace(\"/chatRoom\");\n    },\n    handleInput(value) {\n      this.roomPasswd = value;\n      console.log(this.roomPasswd);\n    },\n    async joinRoomWithPass() {\n      this.user = this.$store.getters.user.userName;\n      const joinRoomInfo = {\n        username: this.user,\n        roomname: this.userChooseRoom,\n        password: this.roomPasswd\n      };\n\n      console.log(\"##############JOIN ROOM WITH PASS###############\");\n      console.log(joinRoomInfo.username + \" is the username\");\n      console.log(joinRoomInfo.roomname + \" is the roomname\");\n      console.log(joinRoomInfo.password + \" is the password\");\n      await this.$store\n        .dispatch(\"roomInfo\", {\n          roomname: joinRoomInfo.roomname,\n          username: joinRoomInfo.username,\n          password: joinRoomInfo.password\n        })\n        .then(\n          function() {\n            console.log(this.$store.getters.user.passCorrect);\n          }.bind(this)\n        );\n      if (this.$store.getters.user.passCorrect) {\n        this.$router.replace(\"/chatRoom\");\n      } else {\n        this.dialog1 = true;\n      }\n      console.log(\"##############JOIN ROOM WITH PASS###############\");\n    },\n    showDialog() {\n      let roomIs = null;\n      if (this.email === null || this.email === undefined) {\n        roomIs = this.$store.getters.user.userName;\n        roomIs = roomIs.split(\"@\");\n        this.roomName = roomIs[0] + \"'s room\";\n        this.email = roomIs;\n      } else {\n        roomIs = this.$store.getters.user.userName;\n        this.roomName = roomIs + \"'s room\";\n      }\n\n      console.log(this.roomName);\n      this.dialog = !this.dialog;\n    },\n    submit() {\n      if (this.$refs.form.validate()) {\n        if (this.roomPasswd === null || this.roomPasswd === \"\") {\n          this.roomPasswd = null;\n          const roomInfo = {\n            username: this.$store.getters.user.userName,\n            roomname: this.roomName,\n            password: this.roomPasswd\n          };\n          this.$store.dispatch(\"createRoom\", roomInfo);\n\n          this.dialog = !this.dialog;\n          this.$router.replace(\"/chatRoom\");\n        } else {\n          const roomInfo = {\n            username: this.$store.getters.user.userName,\n            roomname: this.roomName,\n            password: this.roomPasswd\n          };\n          this.$store.dispatch(\"createRoom\", roomInfo);\n          this.dialog = !this.dialog;\n          this.$router.replace(\"/chatRoom\");\n        }\n\n        // Native form submission is not yet supported\n      } else {\n        console.log(\"Room cant be created as form is not validated..\");\n      }\n    }\n  },\n  watch: {\n    room(value) {\n      if (value) {\n        console.log(value);\n        //this.$router.push(\"/chatRoom\");\n        //console.log(\"Room is created\");\n        //this.$store.dispatch(\"logOutUserUp\");\n      }\n    }\n  },\n  computed: {\n    room() {\n      return this.$store.getters.room;\n    },\n    error() {\n      return this.$store.getters.error;\n    }\n  }\n};\n</script>\n"]}]}