{"remainingRequest":"/home/user101/Desktop/peopleTalk/client/node_modules/babel-loader/lib/index.js!/home/user101/Desktop/peopleTalk/client/node_modules/vuetify-loader/lib/loader.js!/home/user101/Desktop/peopleTalk/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/user101/Desktop/peopleTalk/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/user101/Desktop/peopleTalk/client/src/components/App/Dashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/user101/Desktop/peopleTalk/client/src/components/App/Dashboard.vue","mtime":1571320166796},{"path":"/home/user101/Desktop/peopleTalk/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user101/Desktop/peopleTalk/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/user101/Desktop/peopleTalk/client/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/home/user101/Desktop/peopleTalk/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/user101/Desktop/peopleTalk/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/user101/Desktop/peopleTalk/client/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.split\";\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//const lodash = require(\"lodash\");\nvar _ = require(\"underscore\");\n\nexport default {\n  data: function data() {\n    return {\n      randomNumber: 0,\n      roomTopic: \"Hey, there! Join my room.\",\n      roomColor: [\"deep-orange accent-2\", \"yellow accent-2\", \"lime accent-3\", \"green darken-2\", \"light-blue darken-3\"],\n      totalOnlineUsers: [],\n      userRooms: [],\n      userRoomsWithPass: [],\n      totalOnlineCount: 0,\n      email: null,\n      inputPassData: null,\n      roomName: null,\n      roomPasswd: null,\n      valid: true,\n      user: null,\n      userChooseRoom: null,\n      dialog: false,\n      dialog1: false,\n      passwdProtect: false,\n      passwdEmpty: false,\n      passCorrect: false,\n      nameRules: [function (v) {\n        return !!v || \"Name is required\";\n      } //v => (v && v.length <= 10) || 'Name must be less than 10 characters'\n      ]\n    };\n  },\n  created: function created() {\n    var io = require(\"socket.io-client\"); //let socket = io(\"http://localhost:3000/roomCreated\");\n\n\n    var socket = io(\"http://localhost:3000\");\n    socket.on(\"connect\", function () {\n      var socketId = socket.id; //socketId = socketId.indexOf(\"#\") + 1;\n      //socketId = socket.id.slice(socketId, socket.id.length);\n      //console.log(\"1...###userID##\" + this.userId);\n\n      socket.emit(\"userSocket\", {\n        socketId: socketId,\n        userId: this.$store.getters.user.userId\n      });\n      console.log(\"The Socket id is @-->\", socketId); //socket.emit(\"userSocketId\", {socketId: socket.id, userIs: this.user});\n\n      console.log(\"Connected to server., ready to create rooms.. :  \" + socket.id);\n      socket.emit(\"cleanUp\", socket.id);\n    }.bind(this)); //socket.emit(\"socketCleanup\", this.socketId);\n\n    socket.on(\"RoomInfo\", function (data) {\n      if (data.passwdEmpty === false) {\n        this.userRoomsWithPass.push({\n          roomName: data.roomName\n        });\n\n        for (var i in this.userRoomsWithPass) {\n          socket.emit(\"alreadyRoomWithPass\", this.userRoomsWithPass[i].roomName);\n        }\n      } else {\n        this.passwdProtect = false;\n        this.userRooms.push({\n          roomName: data.roomName\n        });\n\n        for (var _i in this.userRooms) {\n          socket.emit(\"alreadyRoom\", this.userRooms[_i].roomName);\n        }\n      }\n    }.bind(this));\n    socket.on(\"updateRoom\", function (rooms) {\n      rooms = _.uniq(rooms);\n      console.log(rooms);\n      console.log(this.userRooms);\n      this.userRooms = _.uniq(this.userRooms);\n\n      for (var key in rooms) {\n        //this.userRooms.push({ roomName: rooms[key] });\n        this.userRooms.push({\n          roomName: rooms[key]\n        });\n      }\n\n      this.userRooms = _.uniq(this.userRooms, \"roomName\");\n      console.log(this.userRooms);\n    }.bind(this));\n    socket.on(\"updateRoomWithPass\", function (rooms) {\n      rooms = _.uniq(rooms); //this.userRooms = _.uniq(this.userRooms);\n\n      for (var key in rooms) {\n        //this.userRooms.push({ roomName: rooms[key] });\n        this.userRoomsWithPass.push({\n          roomName: rooms[key]\n        });\n      }\n\n      this.userRoomsWithPass = _.uniq(this.userRoomsWithPass, \"roomName\");\n    }.bind(this));\n    socket.on(\"removeRoom\", function (roomInfo) {\n      this.$store.dispatch(\"roomClear\", {\n        roomId: roomInfo.roomId\n      });\n      this.userRooms = [];\n      this.userRoomsWithPass = [];\n\n      for (var key in roomInfo.userRooms) {\n        //this.userRooms.push({ roomName: rooms[key] });\n        this.userRooms.push({\n          roomName: roomInfo.userRooms[key]\n        });\n      }\n\n      for (var keyP in roomInfo.userRoomsWithPass) {\n        //this.userRooms.push({ roomName: rooms[key] });\n        this.userRoomsWithPass.push({\n          roomName: roomInfo.userRoomsWithPass[keyP]\n        });\n      }\n\n      this.userRooms = _.uniq(this.userRooms, \"roomName\");\n      this.userRoomsWithPass = _.uniq(this.userRoomsWithPass, \"roomName\");\n\n      for (var i in this.userRooms) {\n        socket.emit(\"alreadyRoom\", this.userRooms[i].roomName);\n      }\n\n      for (var _i2 in this.userRoomsWithPass) {\n        socket.emit(\"alreadyRoomWithPass\", this.userRoomsWithPass[_i2].roomName);\n      }\n    }.bind(this));\n    socket.on(\"disconnect\", function () {\n      console.log(\"The socket created at room creation time is disconnected# \" + socket.id);\n      socket.disconnect(true);\n    }.bind(this));\n  },\n  mounted: function mounted() {\n    var email = this.$store.getters.user.username;\n    this.email = email;\n  },\n  methods: {\n    onClick: function onClick() {\n      this.userChooseRoom = event.currentTarget.innerText.split(\"\\n\")[1]; //console.log(event.currentTarget.innerText.split(\"\\n\")[1]);\n    },\n    switchPressed: function switchPressed() {\n      this.roomPasswd = null;\n    },\n    joinRoom: function joinRoom() {\n      this.roomPasswd = null;\n      this.user = this.$store.getters.user.userName;\n      var joinRoomInfo = {\n        username: this.user,\n        roomname: this.userChooseRoom,\n        password: this.roomPasswd\n      };\n      console.log(\"##############JOIN ROOM###############\");\n      console.log(joinRoomInfo.username + \" is the username\");\n      console.log(joinRoomInfo.roomname + \" is the roomname\");\n      console.log(joinRoomInfo.password + \" is the password\");\n      this.$store.dispatch(\"roomInfo\", {\n        roomname: joinRoomInfo.roomname,\n        username: joinRoomInfo.username,\n        password: joinRoomInfo.password\n      });\n      console.log(\"##############JOIN ROOM###############\");\n      this.$router.replace(\"/chatRoom\");\n    },\n    handleInput: function handleInput(value) {\n      this.roomPasswd = value;\n      console.log(this.roomPasswd);\n    },\n    joinRoomWithPass: function () {\n      var _joinRoomWithPass = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var joinRoomInfo;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.user = this.$store.getters.user.userName;\n                joinRoomInfo = {\n                  username: this.user,\n                  roomname: this.userChooseRoom,\n                  password: this.roomPasswd\n                };\n                console.log(\"##############JOIN ROOM WITH PASS###############\");\n                console.log(joinRoomInfo.username + \" is the username\");\n                console.log(joinRoomInfo.roomname + \" is the roomname\");\n                console.log(joinRoomInfo.password + \" is the password\");\n                _context.next = 8;\n                return this.$store.dispatch(\"roomInfo\", {\n                  roomname: joinRoomInfo.roomname,\n                  username: joinRoomInfo.username,\n                  password: joinRoomInfo.password\n                }).then(function () {\n                  console.log(this.$store.getters.user.passCorrect);\n                }.bind(this));\n\n              case 8:\n                if (this.$store.getters.user.passCorrect) {\n                  this.$router.replace(\"/chatRoom\");\n                } else {\n                  this.dialog1 = true;\n                }\n\n                console.log(\"##############JOIN ROOM WITH PASS###############\");\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function joinRoomWithPass() {\n        return _joinRoomWithPass.apply(this, arguments);\n      }\n\n      return joinRoomWithPass;\n    }(),\n    showDialog: function showDialog() {\n      var roomIs = null;\n\n      if (this.email === null || this.email === undefined) {\n        roomIs = this.$store.getters.user.userName;\n        roomIs = roomIs.split(\"@\");\n        this.roomName = roomIs[0] + \"'s room\";\n        this.email = roomIs;\n      } else {\n        roomIs = this.$store.getters.user.userName;\n        this.roomName = roomIs + \"'s room\";\n      }\n\n      console.log(this.roomName);\n      this.dialog = !this.dialog;\n    },\n    submit: function submit() {\n      if (this.$refs.form.validate()) {\n        if (this.roomPasswd === null || this.roomPasswd === \"\") {\n          this.roomPasswd = null;\n          var roomInfo = {\n            username: this.$store.getters.user.userName,\n            roomname: this.roomName,\n            password: this.roomPasswd\n          };\n          this.$store.dispatch(\"createRoom\", roomInfo);\n          this.dialog = !this.dialog;\n          this.$router.replace(\"/chatRoom\");\n        } else {\n          var _roomInfo = {\n            username: this.$store.getters.user.userName,\n            roomname: this.roomName,\n            password: this.roomPasswd\n          };\n          this.$store.dispatch(\"createRoom\", _roomInfo);\n          this.dialog = !this.dialog;\n          this.$router.replace(\"/chatRoom\");\n        } // Native form submission is not yet supported\n\n      } else {\n        console.log(\"Room cant be created as form is not validated..\");\n      }\n    }\n  },\n  watch: {\n    room: function room(value) {\n      if (value) {\n        console.log(value); //this.$router.push(\"/chatRoom\");\n        //console.log(\"Room is created\");\n        //this.$store.dispatch(\"logOutUserUp\");\n      }\n    }\n  },\n  computed: {\n    room: function room() {\n      return this.$store.getters.room;\n    },\n    error: function error() {\n      return this.$store.getters.error;\n    }\n  }\n};",{"version":3,"sources":["Dashboard.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-app style=\"background: #eee;\">\n    <v-card flat style=\"background: #eee;\">\n      <v-container fluid grid-list-md>\n        <v-layout row wrap>\n          <v-flex\n            xs3\n            v-for=\"rooms in userRooms\"\n            :key=\"rooms.roomName\"\n            @click=\"onClick(rooms, $event)\"\n            @mouseover=\"onClick(rooms, $event)\"\n          >\n            <v-card\n              raised\n              hover\n              class=\"accent-2 black--text\"\n              :color=\"\n                roomColor[\n                  (randomNumber = Math.floor(Math.random() * roomColor.length))\n                ]\n              \"\n            >\n              <div class=\"subheading right ma-2 pa-0\">1/7</div>\n\n              <v-card-title primary-title>\n                <v-icon>fa-home</v-icon>\n                <div class=\"text-truncate\">\n                  <span\n                    ><div class=\"text-truncate font-weight-thin display-1\">\n                      {{ rooms.roomName }}\n                    </div></span\n                  ><br />\n                  <!--span class=\"text-truncate font-weight-normal heading\">{{ roomTopic }}</span-->\n                </div>\n              </v-card-title>\n              <v-divider></v-divider>\n              <v-card-actions class=\"justify-center\">\n                <v-btn v-on:click=\"joinRoom\" class=\"transparent text-capitalize\"\n                  >Join Room\n                  <v-icon right dark>fa-person-booth</v-icon>\n                </v-btn>\n              </v-card-actions>\n            </v-card>\n          </v-flex>\n        </v-layout>\n      </v-container>\n    </v-card>\n    <v-card flat style=\"background: #eee;\">\n      <v-container fluid grid-list-md>\n        <v-layout row wrap>\n          <v-flex\n            xs3\n            v-for=\"rooms in userRoomsWithPass\"\n            :key=\"rooms.roomName\"\n            @click=\"onClick(rooms, $event)\"\n            @mouseover=\"onClick(rooms, $event)\"\n          >\n            <v-card\n              raised\n              hover\n              class=\"accent-2 black--text\"\n              :color=\"\n                roomColor[\n                  (randomNumber = Math.floor(Math.random() * roomColor.length))\n                ]\n              \"\n            >\n              <div class=\"subheading right ma-2 pa-0\">1/7</div>\n\n              <v-card-title primary-title>\n                <v-icon>fa-home</v-icon>\n                <div class=\"text-truncate\">\n                  <span\n                    ><div class=\"text-truncate font-weight-thin display-1\">\n                      {{ rooms.roomName }}\n                    </div></span\n                  ><br />\n                  <!--span class=\"text-truncate font-weight-normal heading\">{{ roomTopic }}</span-->\n                </div>\n              </v-card-title>\n              <v-card flat class=\"transparent\">\n                <v-card-text>\n                  <v-text-field\n                    class=\"pa-0 ma-0\"\n                    @input=\"handleInput($event)\"\n                    prepend-icon=\"lock\"\n                    name=\"roomPass\"\n                    label=\"Enter the Room Password\"\n                    required\n                  >\n                  </v-text-field>\n                </v-card-text>\n              </v-card>\n              <v-divider></v-divider>\n              <v-card-actions class=\"justify-center\">\n                <v-btn\n                  v-on:click=\"joinRoomWithPass\"\n                  class=\"transparent text-capitalize\"\n                >\n                  Join Room\n                  <v-icon right dark>fa-person-booth</v-icon>\n                </v-btn>\n              </v-card-actions>\n            </v-card>\n          </v-flex>\n        </v-layout>\n      </v-container>\n    </v-card>\n\n    <v-layout row justify-center>\n      <v-dialog v-model=\"dialog1\" max-width=\"290\">\n        <v-card dark color=\"primary\">\n          <v-card-text class=\"headline font-weight-light text-xs-center\">\n            <v-icon class=\"ml-1 mr-2\">fa-exclamation-triangle</v-icon>\n            Invalid Password.\n          </v-card-text>\n\n          <v-card-actions> </v-card-actions>\n        </v-card>\n      </v-dialog>\n    </v-layout>\n\n    <v-tooltip top color=\"primary\">\n      <template v-slot:activator=\"{ on }\">\n        <v-btn\n          v-on=\"on\"\n          fab\n          bottom\n          right\n          small\n          color=\"primary\"\n          fixed\n          v-on:click=\"showDialog\"\n        >\n          <v-icon>add</v-icon>\n        </v-btn>\n      </template>\n      <span>Create Room</span>\n    </v-tooltip>\n    <!-- Room Dialogue-->\n    <v-dialog v-model=\"dialog\" width=\"400px\">\n      <v-card>\n        <v-card-title class=\"font-weight-light  red--text headline mb-0\">\n          Create Room\n        </v-card-title>\n        <v-card-text>\n          <v-form\n            ref=\"form\"\n            v-model=\"valid\"\n            @submit.prevent=\"submit\"\n            lazy-validation\n          >\n            <v-text-field\n              class=\"pa-0 ma-0\"\n              v-model=\"roomName\"\n              :rules=\"nameRules\"\n              prepend-icon=\"home\"\n              name=\"roomName\"\n              label=\"Enter the Room Name\"\n              required\n            >\n            </v-text-field>\n            <!--v-text-field \n                  class=\"pa-0 ma-0\"\n                  v-model=\"roomTopic\" \n                  prepend-icon=\"home\" \n                  name=\"roomTopic\" \n                  label=\"Enter room description\"\n                  required>\n                  </v-text-field-->\n            <v-switch\n              v-model=\"passwdProtect\"\n              @change=\"switchPressed\"\n              color=\"primary\"\n              label=\"Password Protect Room\"\n              value=\"passwdProtect\"\n            ></v-switch>\n            <v-text-field\n              v-show=\"passwdProtect\"\n              class=\"pa-0 ma-0\"\n              v-model=\"roomPasswd\"\n              prepend-icon=\"lock\"\n              name=\"roomPasswd\"\n              label=\"Enter the room Password\"\n              required\n            >\n            </v-text-field>\n            <v-card-actions>\n              <v-spacer></v-spacer>\n              <v-btn\n                v-model=\"dialog\"\n                v-on:click=\"dialog = !dialog\"\n                color=\"primary text-capitalize\"\n                >Cancel</v-btn\n              >\n              <v-btn\n                :disabled=\"!valid\"\n                v-on:click=\"submit\"\n                color=\"primary text-capitalize\"\n                >Create Room</v-btn\n              >\n            </v-card-actions>\n          </v-form>\n        </v-card-text>\n      </v-card>\n    </v-dialog>\n    <!--End of Room Dialogue-->\n  </v-app>\n</template>\n\n<script>\n//const lodash = require(\"lodash\");\nconst _ = require(\"underscore\");\nexport default {\n  data: function() {\n    return {\n      randomNumber: 0,\n      roomTopic: \"Hey, there! Join my room.\",\n      roomColor: [\n        \"deep-orange accent-2\",\n        \"yellow accent-2\",\n        \"lime accent-3\",\n        \"green darken-2\",\n        \"light-blue darken-3\"\n      ],\n      totalOnlineUsers: [],\n      userRooms: [],\n      userRoomsWithPass: [],\n      totalOnlineCount: 0,\n      email: null,\n      inputPassData: null,\n      roomName: null,\n      roomPasswd: null,\n      valid: true,\n      user: null,\n      userChooseRoom: null,\n      dialog: false,\n      dialog1: false,\n      passwdProtect: false,\n      passwdEmpty: false,\n      passCorrect: false,\n      nameRules: [\n        v => !!v || \"Name is required\"\n        //v => (v && v.length <= 10) || 'Name must be less than 10 characters'\n      ]\n    };\n  },\n  created: function() {\n    let io = require(\"socket.io-client\");\n    //let socket = io(\"http://localhost:3000/roomCreated\");\n    let socket = io(\"http://localhost:3000\");\n\n    socket.on(\n      \"connect\",\n      function() {\n        let socketId = socket.id;\n        //socketId = socketId.indexOf(\"#\") + 1;\n        //socketId = socket.id.slice(socketId, socket.id.length);\n        //console.log(\"1...###userID##\" + this.userId);\n        socket.emit(\"userSocket\", {\n          socketId: socketId,\n          userId: this.$store.getters.user.userId\n        });\n        console.log(\"The Socket id is @-->\", socketId);\n        //socket.emit(\"userSocketId\", {socketId: socket.id, userIs: this.user});\n        console.log(\n          \"Connected to server., ready to create rooms.. :  \" + socket.id\n        );\n        socket.emit(\"cleanUp\", socket.id);\n      }.bind(this)\n    );\n\n    //socket.emit(\"socketCleanup\", this.socketId);\n\n    socket.on(\n      \"RoomInfo\",\n      function(data) {\n        if (data.passwdEmpty === false) {\n          this.userRoomsWithPass.push({ roomName: data.roomName });\n          for (let i in this.userRoomsWithPass) {\n            socket.emit(\n              \"alreadyRoomWithPass\",\n              this.userRoomsWithPass[i].roomName\n            );\n          }\n        } else {\n          this.passwdProtect = false;\n          this.userRooms.push({ roomName: data.roomName });\n          for (let i in this.userRooms) {\n            socket.emit(\"alreadyRoom\", this.userRooms[i].roomName);\n          }\n        }\n      }.bind(this)\n    );\n\n    socket.on(\n      \"updateRoom\",\n      function(rooms) {\n        rooms = _.uniq(rooms);\n        console.log(rooms);\n        console.log(this.userRooms);\n        this.userRooms = _.uniq(this.userRooms);\n        for (var key in rooms) {\n          //this.userRooms.push({ roomName: rooms[key] });\n          this.userRooms.push({ roomName: rooms[key] });\n        }\n        this.userRooms = _.uniq(this.userRooms, \"roomName\");\n        console.log(this.userRooms);\n      }.bind(this)\n    );\n\n    socket.on(\n      \"updateRoomWithPass\",\n      function(rooms) {\n        rooms = _.uniq(rooms);\n        //this.userRooms = _.uniq(this.userRooms);\n\n        for (var key in rooms) {\n          //this.userRooms.push({ roomName: rooms[key] });\n          this.userRoomsWithPass.push({ roomName: rooms[key] });\n        }\n        this.userRoomsWithPass = _.uniq(this.userRoomsWithPass, \"roomName\");\n      }.bind(this)\n    );\n\n    socket.on(\n      \"removeRoom\",\n      function(roomInfo) {\n        this.$store.dispatch(\"roomClear\", {\n          roomId: roomInfo.roomId\n        });\n\n        this.userRooms = [];\n        this.userRoomsWithPass = [];\n\n        for (var key in roomInfo.userRooms) {\n          //this.userRooms.push({ roomName: rooms[key] });\n          this.userRooms.push({ roomName: roomInfo.userRooms[key] });\n        }\n\n        for (var keyP in roomInfo.userRoomsWithPass) {\n          //this.userRooms.push({ roomName: rooms[key] });\n          this.userRoomsWithPass.push({\n            roomName: roomInfo.userRoomsWithPass[keyP]\n          });\n        }\n\n        this.userRooms = _.uniq(this.userRooms, \"roomName\");\n        this.userRoomsWithPass = _.uniq(this.userRoomsWithPass, \"roomName\");\n\n        for (let i in this.userRooms) {\n          socket.emit(\"alreadyRoom\", this.userRooms[i].roomName);\n        }\n        for (let i in this.userRoomsWithPass) {\n          socket.emit(\n            \"alreadyRoomWithPass\",\n            this.userRoomsWithPass[i].roomName\n          );\n        }\n      }.bind(this)\n    );\n\n    socket.on(\n      \"disconnect\",\n      function() {\n        console.log(\n          \"The socket created at room creation time is disconnected# \" +\n            socket.id\n        );\n        socket.disconnect(true);\n      }.bind(this)\n    );\n  },\n  mounted() {\n    const email = this.$store.getters.user.username;\n    this.email = email;\n  },\n  methods: {\n    onClick() {\n      this.userChooseRoom = event.currentTarget.innerText.split(\"\\n\")[1];\n      //console.log(event.currentTarget.innerText.split(\"\\n\")[1]);\n    },\n    switchPressed() {\n      this.roomPasswd = null;\n    },\n    joinRoom() {\n      this.roomPasswd = null;\n      this.user = this.$store.getters.user.userName;\n      const joinRoomInfo = {\n        username: this.user,\n        roomname: this.userChooseRoom,\n        password: this.roomPasswd\n      };\n\n      console.log(\"##############JOIN ROOM###############\");\n      console.log(joinRoomInfo.username + \" is the username\");\n      console.log(joinRoomInfo.roomname + \" is the roomname\");\n      console.log(joinRoomInfo.password + \" is the password\");\n      this.$store.dispatch(\"roomInfo\", {\n        roomname: joinRoomInfo.roomname,\n        username: joinRoomInfo.username,\n        password: joinRoomInfo.password\n      });\n      console.log(\"##############JOIN ROOM###############\");\n      this.$router.replace(\"/chatRoom\");\n    },\n    handleInput(value) {\n      this.roomPasswd = value;\n      console.log(this.roomPasswd);\n    },\n    async joinRoomWithPass() {\n      this.user = this.$store.getters.user.userName;\n      const joinRoomInfo = {\n        username: this.user,\n        roomname: this.userChooseRoom,\n        password: this.roomPasswd\n      };\n\n      console.log(\"##############JOIN ROOM WITH PASS###############\");\n      console.log(joinRoomInfo.username + \" is the username\");\n      console.log(joinRoomInfo.roomname + \" is the roomname\");\n      console.log(joinRoomInfo.password + \" is the password\");\n      await this.$store\n        .dispatch(\"roomInfo\", {\n          roomname: joinRoomInfo.roomname,\n          username: joinRoomInfo.username,\n          password: joinRoomInfo.password\n        })\n        .then(\n          function() {\n            console.log(this.$store.getters.user.passCorrect);\n          }.bind(this)\n        );\n      if (this.$store.getters.user.passCorrect) {\n        this.$router.replace(\"/chatRoom\");\n      } else {\n        this.dialog1 = true;\n      }\n      console.log(\"##############JOIN ROOM WITH PASS###############\");\n    },\n    showDialog() {\n      let roomIs = null;\n      if (this.email === null || this.email === undefined) {\n        roomIs = this.$store.getters.user.userName;\n        roomIs = roomIs.split(\"@\");\n        this.roomName = roomIs[0] + \"'s room\";\n        this.email = roomIs;\n      } else {\n        roomIs = this.$store.getters.user.userName;\n        this.roomName = roomIs + \"'s room\";\n      }\n\n      console.log(this.roomName);\n      this.dialog = !this.dialog;\n    },\n    submit() {\n      if (this.$refs.form.validate()) {\n        if (this.roomPasswd === null || this.roomPasswd === \"\") {\n          this.roomPasswd = null;\n          const roomInfo = {\n            username: this.$store.getters.user.userName,\n            roomname: this.roomName,\n            password: this.roomPasswd\n          };\n          this.$store.dispatch(\"createRoom\", roomInfo);\n\n          this.dialog = !this.dialog;\n          this.$router.replace(\"/chatRoom\");\n        } else {\n          const roomInfo = {\n            username: this.$store.getters.user.userName,\n            roomname: this.roomName,\n            password: this.roomPasswd\n          };\n          this.$store.dispatch(\"createRoom\", roomInfo);\n          this.dialog = !this.dialog;\n          this.$router.replace(\"/chatRoom\");\n        }\n\n        // Native form submission is not yet supported\n      } else {\n        console.log(\"Room cant be created as form is not validated..\");\n      }\n    }\n  },\n  watch: {\n    room(value) {\n      if (value) {\n        console.log(value);\n        //this.$router.push(\"/chatRoom\");\n        //console.log(\"Room is created\");\n        //this.$store.dispatch(\"logOutUserUp\");\n      }\n    }\n  },\n  computed: {\n    room() {\n      return this.$store.getters.room;\n    },\n    error() {\n      return this.$store.getters.error;\n    }\n  }\n};\n</script>\n"],"sourceRoot":"src/components/App"}]}